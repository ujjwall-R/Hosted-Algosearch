
 Read problems statements in Mandarin Chinese, Russian and Vietnamese as well.
Consider a set of points in 2D which is initially empty.
You need to process queries which insert and remove points from it.
After each query, you should also print the square of the distance between two closest points in the set.
If there are fewer than 2 points in the set, print 0 instead.
 It is guaranteed that all the queries are valid — there will be no query of adding a point that is already present in the set or
removing a point which does not exist in the set.
Input
The first line of the input contains an integer Q denoting the number of queries. 
Each of the next Q lines contains one query, which will be one of the following two types:

+ x y — add the point (x, y) to the set
- x y — remove the point (x, y) from the set

Output
For each query, output a single line containing one integer — the square of the distance between two closest points in the set.
Constraints

1 ≤ Q ≤ 75,000
1 ≤ x, y ≤ 500

Subtasks

Subtask #1 (10 points): 1 ≤ Q ≤ 100
Subtask #2 (30 points): 1 ≤ Q ≤ 2500 
Subtask #3 (60 points): Original constraints.


                        Sample Input 1
                        





6
+ 1 1
+ 2 2
+ 3 3
- 2 2
+ 400 400
- 1 1



                        Sample Output 1
                        





0
2
2
8
8
315218


Explanation
Query 1. There is only 1 point, so the answer is 0 
Query 2. There are only 2 points, (1, 1) and (2, 2), so answer is (1 - 2)2 + (1 - 2)2, which equals to 2 
Query 3. The points (1, 1) and (2, 2) are one of the closest pairs, and so the answer is still 2 
Query 4. There are only 2 points, (1, 1) and (3, 3), and so answer is (1 - 3)2 + (1 - 3)2 which equals to 8 
Query 5. Points (1, 1) and (3, 3) are still closest, and so answer is 8 
Query 6. There are only 2 points, (3, 3) and (400, 400), and so answer is (3 - 400)2 + (3 - 400)2 equals to 
315218 



Author:
7★gainullinildar


Tester:
7★lg5293


Editorial:
https://discuss.codechef.com/problems/CLOSESTQ


Tags:

               
                 Advanced Divide and Conquer, Computational Geometry
                 
                     
                     Advanced Algorithms
                 
               
             
             



                        Difficulty Rating:
                    

2875


Date Added:
29-04-2017


Time Limit:
3 secs


Source Limit:
50000 Bytes


Languages:
PYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, PERL, SCALA, LUA, BASH, JS, LISP sbcl, PAS gpc, BF, CLOJ, D, CAML, FORT, ASM, FS, WSPC, LISP clisp, SCM guile, PERL6, ERL, CLPS, PRLG, ICK, NICE, ICON, SCM chicken, PIKE, SCM qobi, ST, NEM





Submit

