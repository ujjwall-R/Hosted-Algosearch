
Read problems statements in Mandarin Chinese, Russian, and Bengali as well.
Some cooking competitions going on to be held in various cities and the Chef wants to participate in them. There are NN cities numbered from 11 to N and they are connected by N−1 roads such that every city is connected to every other city. But traveling is a bit different here. Every city i is assigned a travel value, Ai. From a city numbered X, one can only travel to another city Y such that the simple path from X to Y has exactly AX roads.
To participate in a city's competition, the Chef just has to visit it. Help the Chef by finding the maximum number of competitions he can participate in if he can start from any city and visit any city multiple times.
Formally, given a tree in which every node i is assigned a value Ai, you have to find the maximum number of distinct nodes that can be visited, if we can start from any node and visit any node multiple times. The only condition is that you can only move from node i to j if the number of edges between i and j is exactly Ai.
Note: Usually, there is no bound on the stack memory, and is equal to the total memory limit of 1.5 GB. But due to a system configuration issue, the stack limit for C++ is temporarily set to 8MB. So, if you believe that your code requires larger stack limit, please include this in your code.
Input Format
The first line contains a single integer T, the number of test cases. Then the test cases follow.

The first line of each test case contains a single integer N (1≤N≤105).
Next N−1 lines contain 2 integers each, ui and vi, denoting a road between cities ui and vi.
Next line contains N space separated integers, A1⋅⋅⋅AN.

Output Format
In a single line, output the maximum number of cities that can be visited, starting from any one and visiting any city any number of times.
Constraints

1≤T≤104
1≤N≤105
1≤ui,vi≤N and ui≠vi
1≤Ai≤109
It is guaranteed that the given edges form a tree.
It is also guaranteed that the sum of N for all test cases does not exceed 2⋅105.


                        Sample Input 1
                        





3
5
1 3
3 5
1 4
4 2
1 2 3 3 1
6
1 2
1 3
2 4
2 5
3 6
1 1 1 1 1 1
8
1 5
1 6
1 7
1 8
1 2
2 3
3 4
1 2 3 4 5 6 7 8



                        Sample Output 1
                        





5
6
4


Explanation
In example case 1,

From city 1, Chef can move only to cities 3 or 4.
From city 2, Chef can move only to city 1.
From city 3, Chef can move only to city 2.
From city 4, Chef can move only to city 5.
From city 5, Chef can move only to city 3.
Chef can follow the path 1→3→2→1→4→5, and visit every city.

In example case 2,

Chef can follow any path to visit all the vertices eventually. since every Ai = 1. 

In example case 3,

Chef can follow the path 1→2→4→5.
There are other paths as well, but the maximum number would be 4 only.




Author:
6★shikhar7s


Tester:
5★theoneyouwant


Editorial:
https://discuss.codechef.com/problems/MAXJMP


Tags:

               
                 Trees, Directed Acyclic Graphs, Centroid Decomposition, Dynamic Programming, Strongly Connected Components, DFS
                 
                     
                     Data Structures, Graphs, Directed Graphs, Advanced Algorithms, Advanced Graph Algos, Algorithms, Graph Algos, Traversals
                 
               
             
             



                        Difficulty Rating:
                    

3395


Date Added:
14-08-2021


Time Limit:
4 secs


Source Limit:
50000 Bytes


Languages:
CPP17, PYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, kotlin, PERL, SCALA, LUA, BASH, JS, rust, LISP sbcl, PAS gpc, BF, CLOJ, R, D, CAML, swift, FORT, ASM, FS, WSPC, LISP clisp, SQL, SCM guile, PERL6, ERL, CLPS, PRLG, SQLQ, ICK, NICE, ICON, COB, SCM chicken, PIKE, SCM qobi, ST, NEM





Submit

