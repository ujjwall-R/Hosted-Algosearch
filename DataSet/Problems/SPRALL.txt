
In Chefland, there are N cities numbered from 1 to N. The cities are connected using N−1 roads such that there exists a path between all pairs of cities. In other words, the cities and roads forma a tree-structure
The roads of Chefland are not in good condition. Therefore, all the roads need to be destroyed. The cost of destroying a road between cities x and y is dx⋅dy, where dx and dy are the degrees of the cities x and y respectively.
Note that, the degree of a city is the number of roads connected to it before each destroy operation.
Chef wants to find the minimum cost to destroy all the roads. On calculating this cost once, he finds the process very interesting. Therefore, he does this for Q more independent queries.
In each query, a road is removed and another road is added. Find the minimum cost to destroy all roads initially, and after each query. It is guaranteed that after each query, all the cities are still connected and form a tree-structure.
Note: Since the queries are independent, the initial tree is retained after each query.
Input Format

The first line contains a single integer T , the number of test cases. Then the test cases follow.
The first line of each test case contains two integers N and Q.
The next N−1 lines contain two integers each, ui and vi , denoting a road between cities ui and vi .
The next Q lines contain four space separated integers, ai, bi, ci, and di denoting that the road between the cities ai and bi is removed and the road between the cities ci and di is added.

Output Format
For each test case, output Q+1 lines. Each line should contain a single integer.
The first line contains the answer to the initial tree. The next Q lines contain the answer for the updated tree in each query.
Constraints

1≤T≤104
1≤N,Q≤105
1≤ui,vi≤N,ui≠vi
1≤ai,bi,ci,di≤N,ai≠bi,ci≠di
It is guaranteed that there exists a road between cities ai and bi.
It is guaranteed that the given edges form a tree initially as well as after every query.

Subtasks

Subtask 1 (30 points):
Sum of N⋅Q over all test cases does not exceed 2⋅105.
Subtask 2 (70 points):
Sum of N over all test cases does not exceed 2⋅105.
Sum of Q over all test cases does not exceed 2⋅105.


                        Sample Input 1
                        





1
4 4
1 2
1 3
1 4
1 2 2 3
1 3 2 3
4 1 1 4
2 1 4 2



                        Sample Output 1
                        





6
5
5
6
5


Explanation
Test Case 1: Initially, the tree looks like:

The roads can be destroyed as: 

Remove edge between nodes 1 and 2. The degree of these nodes are 3 and 1 respectively. Hence, the cost is 3⋅1=3. Now, the degree of node 1 becomes 2.
Remove edge between nodes 1 and 3. The degree of these nodes are 2 and 1 respectively. Hence, the cost is 2⋅1=2. Now, the degree of node 1 becomes 1.
Remove edge between nodes 1 and 4. The degree of these nodes are 1 and 1 respectively. Hence, the cost is 1⋅1=1.

Thus, the total cost is 3+2+1=6. It can be proven that this is the minimum cost required to remove all the edges.

Query 1: The edge between 1 and 2 is removed and the edge between 2 and 3 is added. The tree looks like:

The minimum total cost to remove all the edges of this tree is 5.
Query 2: The edge between 1 and 3 is removed and the edge between 2 and 3 is added. The tree looks like:

The minimum total cost to remove all the edges of this tree is 5.
Query 3: The edge between 4 and 1 is removed and the edge between 1 and 4 is added. Thus, the tree remains the same as the initial tree.
The total cost of removing all the edges is 6, as explained earlier.
Query 4: The edge between 2 and 1 is removed and the edge between 4 and 2 is added. The tree looks like:

The minimum total cost to remove all the edges of this tree is 5.




Author:
6★shikhar7s


Tester:
5★mexomerf


Tags:

               
                 easy-medium, ltime106, shikhar7s, trees
                 
               
             
             



                        Difficulty Rating:
                    

2425


Date Added:
18-03-2022


Time Limit:
1 secs


Source Limit:
50000 Bytes


Languages:
CPP17, PYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, kotlin, PERL, SCALA, LUA, BASH, JS, rust, LISP sbcl, PAS gpc, BF, CLOJ, R, D, CAML, swift, FORT, ASM, FS, WSPC, LISP clisp, SQL, SCM guile, PERL6, ERL, CLPS, PRLG, SQLQ, ICK, NICE, ICON, COB, SCM chicken, PIKE, SCM qobi, ST, NEM





Submit

