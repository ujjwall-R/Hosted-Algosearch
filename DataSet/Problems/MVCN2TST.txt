
Read problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.
Chef is preparing tests for the problem "Move the Coins"!
He needs to create a tree GG with NN nodes (numbered 11 through NN), which is rooted at node 11, and a list of QQ distinct reparentings. A reparenting is a pair of nodes (u,v)(u,v) (u≠1u≠1) of GG and the result of applying it to GG is another graph, formed as follows:

Take a copy of the original tree GG.
In this copy, remove the edge connecting the vertex uu to its parent.
Then, add a new edge between the nodes uu and vv.

As an example, consider the following tree GG:

We wish to apply the reparenting r=(6,3)r=(6,3) to it. The resulting graph would be

A reparenting rr is valid if the resulting graph is still a tree (that is, a connected graph without cycles). For the time being, Chef wants to generate only valid reparentings.
Chef has already decided on the tree G and now he just needs to pick Q valid reparentings. He makes an initial list L of all valid reparentings for this tree and sorts them in a special order.
Let r=(u,v) and r′=(u′,v′) be valid reparentings. Their order is decided as follows:

if u<u′, then r<r′
if u>u′, then r>r′
if u=u′, find the distances of nodes v and v′ from the root and denote them by h and h′ respectively
if u=u′ and h<h′, then r<r′
if u=u′ and h>h′, then r>r′
if u=u′, h=h′ and v<v′, then r<r′
if u=u′, h=h′ and v>v′, then r>r′

Chef chooses Q integers c1,c2,…,cQ, removes the c1-th element of L, then removes the c2-th element of the resulting (smaller) list L, and so on, until he removes the cQ-th element. The sequence c1,c2,…,cQ is chosen in such a way that during this process, each of them is a valid index of an element in the current list L. This way, he removes Q distinct valid reparentings and uses them in one test.
Because Chef does not believe in making life easy for himself, the sequence c1,c2,…,cQ is encrypted and each of its elements cannot be decrypted until all previous reparentings are found. More formally, consider a decryption key d; initially, d=0. You are given an encrypted sequence e1,e2,…,eQ. For each integer i from 1 to Q, Chef decrypts ci=ei⊕d (⊕ denotes the bitwise XOR operator), finds the ci-th reparenting in the current list L, denoted by (ui,vi), removes it from L and updates the decryption key d to (d+2i⋅ui+3i⋅vi)%(109+7).
Can you help Chef find the Q valid reparentings corresponding to his encrypted choices? Calculating the final value of d will suffice to show that you can do it!
Input

The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.
The first line of each test case contains a single integer N.
Each of the next N−1 lines contains two space-separated integers a and b denoting that nodes a and b are connected by an edge.
The next line contains a single integer Q.
Q lines follow. For each valid i, the i-th of these lines contains a single integer ei.

Output
For each test case, print a single line containing one integer ― the final value of d after processing all Q reparentings.
Constraints

1≤T≤1,000
1≤N,Q≤200,000
1≤a,b≤N
0≤ei≤236 for each valid i
1≤ci≤R+1−i for each valid i, where R is the number of valid reparentings
the sum of N over all test cases does not exceed 200,000
the sum of Q over all test cases does not exceed 200,000

Subtasks
Subtask #1 (5 points):

T≤10
N,Q≤100

Subtask #2 (10 points):

T≤100
N,Q≤1,000

Subtask #3 (85 points): original constraints

                        Sample Input 1
                        





2
5
1 3
1 2
2 4
2 5
3
5
23
72
7
1 7
2 1
6 1
5 4
3 5
1 5
5
9
6
35
313
602



                        Sample Output 1
                        





126
910


Explanation
Example case 1: The tree G is

There are 25 reparentings (u,v) ? too many to draw all of them! However, here is a representative sampling. Valid reparentings are marked with a '?'; invalid ones with a '?':

We can also form a table of validity of all reparentings (u,v):
         v
     1 2 3 4 5 
     ?????????
  1 ?? ? ? ? ? 
  2 ?? ? ? ? ? 
u 3 ?? ? ? ? ? 
  4 ?? ? ? ? ? 
  5 ?? ? ? ? ? 

Our initial list L, then, is formed by listing all pairs (u,v) with a '?' and sorting in the order described above. We get the following list:
 #   u  v  h
 1.  2  1  0
 2.  2  3  1
 3.  3  1  0
 4.  3  2  1
 5.  3  4  2
 6.  3  5  2
 7.  4  1  0
 8.  4  2  1
 9.  4  3  1
10.  4  5  2
11.  5  1  0
12.  5  2  1
13.  5  3  1
14.  5  4  2

For i=1,2,3, we need to decrypt ei to get ci, then find the corresponding reparenting (ui,vi) in the current list L, remove it from L and use it to update our decryption key d. The initial value of d is 0. The first encrypted choice is e1=5; we decrypt it to get c1=d⊕e1=0⊕5=5, so the reparenting corresponding to the first choice is the 5-th entry in the current list L, which is (u1,v1)=(3,4). We update d to (0+21⋅u1+31⋅v1)%(109+7)=18 and remove the 5-th element from L, which becomes
 #   u  v  h
 1.  2  1  0
 2.  2  3  1
 3.  3  1  0
 4.  3  2  1
 5.  3  5  2
 6.  4  1  0
 7.  4  2  1
 8.  4  3  1
 9.  4  5  2
10.  5  1  0
11.  5  2  1
12.  5  3  1
13.  5  4  2

On to the second choice! e2=23, so c2=18⊕23=5 and the reparenting (u2,v2) is (3,5). We update d again to (18+22⋅u2+32⋅v2)%(109+7)=75 and remove (3,5) from our list L, which becomes
 #   u  v  h
 1.  2  1  0
 2.  2  3  1
 3.  3  1  0
 4.  3  2  1
 5.  4  1  0
 6.  4  2  1
 7.  4  3  1
 8.  4  5  2
 9.  5  1  0
10.  5  2  1
11.  5  3  1
12.  5  4  2

On to the third and final choice!  With e3=72, we decrypt c3=75⊕72=3, so the reparenting (u3,v3)=(3,1). We use this to update d for the final time to (75+23⋅u3+33⋅v3)%(109+7)=126.
We have now processed all Q choices, and the final decryption key is d=126.
Example case 2: The tree G is

There are 49 possible reparentings; again, we only show a representative sample of them and their validity:

The whole table of validity of reparentings is
           v
     1 2 3 4 5 6 7 
     ?????????????
  1 ?? ? ? ? ? ? ? 
  2 ?? ? ? ? ? ? ? 
  3 ?? ? ? ? ? ? ? 
u 4 ?? ? ? ? ? ? ? 
  5 ?? ? ? ? ? ? ? 
  6 ?? ? ? ? ? ? ? 
  7 ?? ? ? ? ? ? ? 

By listing the valid ones and sorting them in the described order, we get our initial list L:
 #   u  v  h
 1.  2  1  0
 2.  2  5  1
 3.  2  6  1
 4.  2  7  1
 5.  2  3  2
 6.  2  4  2
 7.  3  1  0
 8.  3  2  1
 9.  3  5  1
10.  3  6  1
11.  3  7  1
12.  3  4  2
13.  4  1  0
14.  4  2  1
15.  4  5  1
16.  4  6  1
17.  4  7  1
18.  4  3  2
19.  5  1  0
20.  5  2  1
21.  5  6  1
22.  5  7  1
23.  6  1  0
24.  6  2  1
25.  6  5  1
26.  6  7  1
27.  6  3  2
28.  6  4  2
29.  7  1  0
30.  7  2  1
31.  7  5  1
32.  7  6  1
33.  7  3  2
34.  7  4  2

The initial value of d is 0. The first encrypted value is e1=9 and we decrypt it to get c1=d⊕e1=0⊕9=9. The reparenting (u1,v1) is the 9-th element of L, i.e. (u1,v1)=(3,5). We update d to (0+21⋅u1+31⋅v1)%(109+7)=21 and remove (3,5) from the list L. (To save space, we do not show L after each removal.)
On to the next encrypted value e2=6: we decrypt it to get c2=21⊕6=19, so the reparenting (u2,v2) is the 19-th element of L now (the 20-th element in the initial list), i.e. (5,2). We update d to (21+22⋅u2+32⋅v2)%(109+7)=59 and remove (5,2) from L.
Next, e3=35, so c3=59⊕35=24, (u3,v3)=(6,7), we update d to (59+23⋅u3+33⋅v3)%(109+7)=296 and remove (6,7) from L.
Next, e4=313, so c4=296⊕313=17, (u4,v4)=(4,3), we update d to (296+24⋅u4+34⋅v4)%(109+7)=603 and remove (4,3) from L.
The last of Chef's encrypted choices is e5=602, so c5=603⊕602=1, (u5,v5)=(2,1). We update d to (603+25⋅u5+35⋅v5)%(109+7)=910.
We have now processed all Q of Chef's choices, and the final decryption key is d=910.



Author:
6★ssjgz


Editorial:
https://discuss.codechef.com/problems/MVCN2TST


Tags:

               
                 Trees, Disjoint Set Union, Persistent Segment Trees, DFS, Binary Search, Prefix Sum
                 
                     
                     Data Structures, Graphs, Advanced Data Structures, Persistent Structures, Algorithms, Graph Algos, Traversals, Searching, Simple Algos
                 
               
             
             



                        Difficulty Rating:
                    

2622


Date Added:
30-07-2020


Time Limit:
3 secs


Source Limit:
50000 Bytes


Languages:
CPP17, PYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, kotlin, PERL, SCALA, LUA, BASH, JS, rust, LISP sbcl, PAS gpc, BF, CLOJ, R, D, CAML, swift, FORT, ASM, FS, WSPC, LISP clisp, SQL, SCM guile, PERL6, ERL, CLPS, PRLG, SQLQ, ICK, NICE, ICON, COB, SCM chicken, PIKE, SCM qobi, ST, NEM





Submit

