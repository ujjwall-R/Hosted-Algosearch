
You are given a standard 8×88×8 chessboard which has exactly 33 pieces placed on it - 22 black rooks and 11 white king. The rows are numbered 11 to 88 from bottom to top, and the columns are numbered 11 to 88 from left to right. The cell at the intersection of the ii-th column and jj-th row is denoted (i,j)(i,j) (like the coordinate system on the xyxy-plane).
Is it possible for the white king to be checkmated by the rooks in exactly one move? It is guaranteed that the initial position of pieces is such that the white king is not under check.
Note that in the given situation, black moves first.
Assume that all the chess rules are to be followed:

Each square can contain at most one piece.
Rooks can only travel in straight lines along the row or column they are placed at, and can't jump over other pieces.
The King can move to any of its 88 adjacent squares.
A piece can't capture a piece of the same color as itself.
After a black makes a move, the white king can capture a rook if it's present on any of the 8 adjacent squares and not protected by the other rook.
The king is said to be in checkmate if the king is currently under check and there exists no legal move with the king to escape from the check.
Stalemate is considered as a draw for both sides.

For a more detailed explanation of the moves of pieces, along with images, please click here. 
Note: The input and output are large, so use fast input-output methods.

In C++, either use printf and scanf, or add the line ios::sync_with_stdio(0); cin.tie(0); to the beginning of main to speed up cin and cout. Also, do not use endl, only use '\n'.
In python3/pypy3, add the lines

import sys
input = sys.stdin.readline

to the beginning of your code and then use input as you would normally do

In Java, use BufferedReader and PrintWriter

Input Format

The first line of input will contain a single integer T, denoting the number of test cases. The description of T test cases follows.
Each test case contains three lines of input.
The first line contains two space-separated integers xk and yk, the row and column respectively in which white king is placed.
The second line contains two space-separated integers x1 and y1, the row and column respectively in which the first black rook is placed.
The third line contains two space-separated integers x2 and y2, the row and column respectively in which the second black rook is placed.

Output Format
For each test case, output a single line containing the answer: "YES" if it's possible to checkmate the king in one move and "NO" if not.
You may print each character of the string in uppercase or lowercase (for example, the strings "yEs", "yes", "Yes" and "YES" will all be treated as identical).
Constraints

1≤T≤1.6⋅105
1≤xk,yk,x1,y1,x2,y2≤8
Initially the king is not under check, i.e, xk≠x1 and xk≠x2 and yk≠y1 and yk≠y2.
No two pieces overlap.

Subtasks
Subtask #1 (100 points): Original constraints

                        Sample Input 1
                        





4
1 1
8 2
7 3
1 8
8 2
8 3
1 1
8 2
2 3
1 1
8 8
8 2



                        Sample Output 1
                        





YES
NO
NO
NO


Explanation
Test Case 1: The second rook can be moved to (7,1), thus checkmating the king.
 

Test Case 2 and 3: No possible move exists to checkmate the king. The following images describe why checkmating is impossible in test case 2:
 

 

Test Case 4: The game can end in a stalemate if the first rook is moved to (2,8), but there exists no move to checkmate the king.



Author:
daanish_adm


Editorial:
https://discuss.codechef.com/problems/CHECKMATE


Tags:

               
                 Chess, Case work, Conditional Statements, Observation, Brute Force, Implementation
                 
                     
                     Special, Basic Programming Concepts, Algorithms
                 
               
             
             



                        Difficulty Rating:
                    

N/A


Date Added:
30-11-2021


Time Limit:
0.5 secs


Source Limit:
50000 Bytes


Languages:
CPP17, PYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, kotlin, PERL, SCALA, LUA, BASH, JS, rust, LISP sbcl, PAS gpc, BF, CLOJ, R, D, CAML, swift, FORT, ASM, FS, WSPC, LISP clisp, SQL, SCM guile, PERL6, ERL, CLPS, PRLG, SQLQ, ICK, NICE, ICON, COB, SCM chicken, PIKE, SCM qobi, ST, NEM





Submit

